//Pacotes Importados
package Telas;
import Classes.Membro;
import Classes.*;
import Classes.EstoqueClasse;
import Classes.ListadeComprasClasse;
import java.io.FileWriter;
import java.io.IOException;
import java.util.*;
import javax.swing.JOptionPane;
import static Telas.CadastroProjeto.listaProjetos;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.logging.Level;
import java.util.logging.Logger;
import static Telas.CadastroItem.tag;

public class Inicio extends javax.swing.JFrame {

    //Booleanos para garantir que apenas uma Tela, além da de início, esteja ativa
    boolean estoqueAtivo = false;
    boolean listadeComprasAtivo = false;
    boolean cadastrarItemAtivo = false;
    boolean cadastrarMembroAtivo = false;
    boolean cadastrarProjetoAtivo = false;
    
    //Objetos Tela para facilitar manipulação
    static CadastroItem cdtItem = new CadastroItem();
    static CadastroMembro cdtMembro = new CadastroMembro();
    static Estoque estoque = new Estoque();
    static ListadeCompras lstCompras = new ListadeCompras();
    static CadastroProjeto cdtProjeto = new CadastroProjeto();
    static Inicio init;
    //Instanciação do Estoque e Lista de Compras
    static EstoqueClasse est = new EstoqueClasse("estoque.txt");
    static ListadeComprasClasse lstcmp = new ListadeComprasClasse("listadeCompras.txt");
    //Membro em uso
    static ArrayList<Membro> listaMembros = new ArrayList<Membro>();
    static Membro usuario;
    public Inicio() {
        initComponents();
        //Carregar Arquivos
        carregarMembros();
        carregarProjetos();
        carregarTags();
        //Configuração Inicial dos Botões. Se nenhum membro estiver cadastrado, será possível candidatar 1 Diretor
        btnCadastrarItem.setEnabled(false);
        btnCadastrarMembro.setEnabled(false);
        if(listaMembros.isEmpty()){
            btnCadastrarMembro.setEnabled(true);
        }
        btnCadastrarProjeto.setEnabled(false);
        btnEstoque.setEnabled(false);
        btnListadeCompras.setEnabled(false);
        btnSair.setEnabled(true);
        btnLogout.setEnabled(false);
        txtSenha.setText("");
        atualizaboxListaMembros();
        
        
            
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Background = new javax.swing.JPanel();
        lblTitulo = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        btnEstoque = new javax.swing.JButton();
        btnListadeCompras = new javax.swing.JButton();
        btnCadastrarItem = new javax.swing.JButton();
        btnCadastrarMembro = new javax.swing.JButton();
        btnCadastrarProjeto = new javax.swing.JButton();
        btnSair = new javax.swing.JButton();
        boxListaMembros = new javax.swing.JComboBox<>();
        btnOkInício = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        lblSenha = new javax.swing.JLabel();
        btnLogout = new javax.swing.JButton();
        txtSenha = new javax.swing.JPasswordField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setSize(new java.awt.Dimension(1280, 720));

        Background.setBackground(new java.awt.Color(0, 0, 102));
        Background.setPreferredSize(new java.awt.Dimension(1280, 720));

        lblTitulo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitulo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/Logo BRANCA512px.png"))); // NOI18N
        lblTitulo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 48)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Inventário Mecajun");

        btnEstoque.setText(" Estoque");
        btnEstoque.setAlignmentX(0.5F);
        btnEstoque.setPreferredSize(new java.awt.Dimension(150, 50));
        btnEstoque.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEstoqueActionPerformed(evt);
            }
        });

        btnListadeCompras.setText("Lista de Compras");
        btnListadeCompras.setAlignmentX(0.5F);
        btnListadeCompras.setPreferredSize(new java.awt.Dimension(150, 50));
        btnListadeCompras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListadeComprasActionPerformed(evt);
            }
        });

        btnCadastrarItem.setText("Cadastrar Item");
        btnCadastrarItem.setAlignmentX(0.5F);
        btnCadastrarItem.setPreferredSize(new java.awt.Dimension(150, 50));
        btnCadastrarItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCadastrarItemActionPerformed(evt);
            }
        });

        btnCadastrarMembro.setText("Cadastrar Membro");
        btnCadastrarMembro.setAlignmentX(0.5F);
        btnCadastrarMembro.setPreferredSize(new java.awt.Dimension(150, 50));
        btnCadastrarMembro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCadastrarMembroActionPerformed(evt);
            }
        });

        btnCadastrarProjeto.setText("Cadastrar Projeto");
        btnCadastrarProjeto.setAlignmentX(0.5F);
        btnCadastrarProjeto.setPreferredSize(new java.awt.Dimension(150, 50));
        btnCadastrarProjeto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCadastrarProjetoActionPerformed(evt);
            }
        });

        btnSair.setText("Sair");
        btnSair.setAlignmentX(0.5F);
        btnSair.setPreferredSize(new java.awt.Dimension(150, 50));
        btnSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSairActionPerformed(evt);
            }
        });

        boxListaMembros.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boxListaMembrosActionPerformed(evt);
            }
        });

        btnOkInício.setText("OK");
        btnOkInício.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOkInícioActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Usuário:");

        lblSenha.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        lblSenha.setForeground(new java.awt.Color(255, 255, 255));
        lblSenha.setText("Senha:");

        btnLogout.setText("Logout");
        btnLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogoutActionPerformed(evt);
            }
        });

        txtSenha.setText("jPasswordField1");

        javax.swing.GroupLayout BackgroundLayout = new javax.swing.GroupLayout(Background);
        Background.setLayout(BackgroundLayout);
        BackgroundLayout.setHorizontalGroup(
            BackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BackgroundLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(BackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblTitulo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(BackgroundLayout.createSequentialGroup()
                        .addGap(90, 90, 90)
                        .addComponent(btnEstoque, javax.swing.GroupLayout.DEFAULT_SIZE, 152, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(btnListadeCompras, javax.swing.GroupLayout.DEFAULT_SIZE, 155, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(btnCadastrarItem, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnCadastrarMembro, javax.swing.GroupLayout.DEFAULT_SIZE, 155, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(btnCadastrarProjeto, javax.swing.GroupLayout.DEFAULT_SIZE, 155, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(btnSair, javax.swing.GroupLayout.DEFAULT_SIZE, 149, Short.MAX_VALUE)
                        .addGap(153, 153, 153))
                    .addGroup(BackgroundLayout.createSequentialGroup()
                        .addGap(358, 358, 358)
                        .addGroup(BackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblSenha, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(BackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(boxListaMembros, 0, 311, Short.MAX_VALUE)
                            .addComponent(txtSenha))
                        .addGap(18, 18, 18)
                        .addGroup(BackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnOkInício)
                            .addComponent(btnLogout))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        BackgroundLayout.setVerticalGroup(
            BackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BackgroundLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(lblTitulo)
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addGap(30, 30, 30)
                .addGroup(BackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(boxListaMembros, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnOkInício)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(BackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSenha)
                    .addComponent(btnLogout)
                    .addComponent(txtSenha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(82, 82, 82)
                .addGroup(BackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEstoque, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnListadeCompras, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCadastrarMembro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSair, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCadastrarProjeto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCadastrarItem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(465, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Background, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1246, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Background, javax.swing.GroupLayout.DEFAULT_SIZE, 1045, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCadastrarItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCadastrarItemActionPerformed
        //Configuração das Telas Ativas e Inativas
        estoqueAtivo = false;
        listadeComprasAtivo = false;
        cadastrarItemAtivo = true;
        cadastrarMembroAtivo = false;
        cadastrarProjetoAtivo = false;

        cdtItem.setVisible(true);
        cdtMembro.setVisible(false);
        estoque.setVisible(false);
        lstCompras.setVisible(false);
        cdtProjeto.setVisible(false);
        //Atualizam as Tags e Projetos após deixar a página visível
        cdtItem.atualizalstTags();
        cdtItem.atualizaboxListaProjetos();
       
        
    }//GEN-LAST:event_btnCadastrarItemActionPerformed

    private void btnCadastrarMembroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCadastrarMembroActionPerformed
        //Configuração das Telas Ativas e Inativas
        estoqueAtivo = false;
        listadeComprasAtivo = false;
        cadastrarItemAtivo = false;
        cadastrarMembroAtivo = true;
        cadastrarProjetoAtivo = false;
        
        cdtItem.setVisible(false);
        cdtMembro.setVisible(true);
        estoque.setVisible(false);
        lstCompras.setVisible(false);
        cdtProjeto.setVisible(false);
    }//GEN-LAST:event_btnCadastrarMembroActionPerformed

    private void btnEstoqueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEstoqueActionPerformed
        //Configuração das Telas Ativas e Inativas
        estoqueAtivo = true;
        listadeComprasAtivo = false;
        cadastrarItemAtivo = false;
        cadastrarMembroAtivo = false;
        cadastrarProjetoAtivo = false;
        
        cdtItem.setVisible(false);
        cdtMembro.setVisible(false);
        estoque.setVisible(true);
        lstCompras.setVisible(false);
        cdtProjeto.setVisible(false);
        //Carregar Tags, Projetos, a Tabela com os Itens e a configuração correta de botões
        estoque.atualizalstTag();
        estoque.atualizaboxListaProjetos();
        estoque.carregarTabela(est);
        estoque.atualizabntDir();
    }//GEN-LAST:event_btnEstoqueActionPerformed

    private void btnListadeComprasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListadeComprasActionPerformed
        //Configuração das Telas Ativas e Inativas
        estoqueAtivo = false;
        listadeComprasAtivo = true;
        cadastrarItemAtivo = false;
        cadastrarMembroAtivo = false;
        cadastrarProjetoAtivo = false;
        
        cdtItem.setVisible(false);
        cdtMembro.setVisible(false);
        estoque.setVisible(false);
        lstCompras.setVisible(true);
        cdtProjeto.setVisible(false);
        //Carregar Tabelas, Tags, Projetos e verifica a permissão dos membros em relação ao uso do botão FoiComprado
        lstCompras.carregarTabela(lstcmp);
        lstCompras.atualizalstTag();
        lstCompras.atualizaboxListaProjetos();
        if(usuario.getDiretoriaMembro().equals("Diretoria")  || usuario.getDiretoriaMembro().equals("Diretoria")){
            lstCompras.atualizaBntDir();
        }
        else{
            lstCompras.atualizaBntMembro();
        }
    }//GEN-LAST:event_btnListadeComprasActionPerformed

    private void btnCadastrarProjetoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCadastrarProjetoActionPerformed
        //Configuração das Telas Ativas e Inativas
        estoqueAtivo = false;
        listadeComprasAtivo = false;
        cadastrarItemAtivo = false;
        cadastrarMembroAtivo = false;
        cadastrarProjetoAtivo = true;
        
        cdtItem.setVisible(false);
        cdtMembro.setVisible(false);
        estoque.setVisible(false);
        lstCompras.setVisible(false);
        cdtProjeto.setVisible(true);
        //Atualiza a Lista contendo os membros do Projeto
        cdtProjeto.atualizalstMembrosProj();
    }//GEN-LAST:event_btnCadastrarProjetoActionPerformed

    private void boxListaMembrosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boxListaMembrosActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_boxListaMembrosActionPerformed

    private void btnOkInícioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOkInícioActionPerformed

        int indexMembro = boxListaMembros.getSelectedIndex();
        //Liberar Programa para uso caso o usuário esteja cadastrado
        if(indexMembro > -1){
        String aux = listaMembros.get(indexMembro).getSenhaMembro(); 
        if(aux.equals(txtSenha.getText())){
            usuario = listaMembros.get(indexMembro);
            btnCadastrarProjeto.setEnabled(false);
            btnCadastrarItem.setEnabled(false);
            //Botões Exclusivos de Diretores ou Gerentes
            if(usuario.getDiretoriaMembro().equals("Diretoria") || usuario.getDiretoriaMembro().equals("Gerencia")){
               btnCadastrarProjeto.setEnabled(true);
               btnCadastrarItem.setEnabled(true);
            }
            
            btnCadastrarMembro.setEnabled(true);
            btnEstoque.setEnabled(true);
            btnListadeCompras.setEnabled(true);
            btnSair.setEnabled(true);
            btnLogout.setEnabled(true);
            txtSenha.setText("");
            boxListaMembros.setSelectedIndex(-1);
        }
        else{
           JOptionPane.showMessageDialog(null, "Senha Incorreta","Mensagem",JOptionPane.INFORMATION_MESSAGE ); 
        }
        }
    }//GEN-LAST:event_btnOkInícioActionPerformed

    private void btnSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSairActionPerformed
        //Sai do Programa e salva o Estoque, Lista de Compras, Projetos, Membros e Tags em Arquivos Distintos (um para cada parâmetro)
        FileWriter deletaAux;
        try {
            deletaAux = new FileWriter("estoque.txt", false);
            deletaAux.close();
        } catch (IOException ex) {
            Logger.getLogger(Inicio.class.getName()).log(Level.SEVERE, null, ex);
        }
        
                try {
            deletaAux = new FileWriter("Projetos.txt", false);
            deletaAux.close();
        } catch (IOException ex) {
            Logger.getLogger(Inicio.class.getName()).log(Level.SEVERE, null, ex);
        }
                
        for(int i = 0; i < listaProjetos.size();i++){
            try {
                Projeto auxProj = listaProjetos.get(i);
                FileWriter escrever = new FileWriter("Projetos.txt",true);
                String[] auxiliarPro = auxProj.getNomesMembros();
                String auxStr = Arrays.toString(auxiliarPro);
                escrever.write(auxProj.getNome() + " " + auxProj.getDescricao() + " " + auxStr + "\n" );
                escrever.close();
    }           
                catch (IOException e) {
                JOptionPane.showMessageDialog(null,"Erro ao salvar o Item no Arquivo","Mensagem",JOptionPane.PLAIN_MESSAGE);
    }
        }
        
        try {
            deletaAux = new FileWriter("Membros.txt", false);
            deletaAux.close();
        } catch (IOException ex) {
            Logger.getLogger(Inicio.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        for(int i = 0; i < listaMembros.size(); i++){
            try {
                Membro auxMem = listaMembros.get(i);
                FileWriter escrever = new FileWriter("Membros.txt",true);
                escrever.write(auxMem.getNomeMembro() + " " + auxMem.getMatriculaMembro() + " " + auxMem.getDiretoriaMembro()+ " " + auxMem.getEmailInstitucionalMembro() + " " + auxMem.getSenhaMembro() + "\n" );
                escrever.close();
    }           
                catch (IOException e) {
                JOptionPane.showMessageDialog(null,"Erro ao salvar o Item no Arquivo","Mensagem",JOptionPane.PLAIN_MESSAGE);
    }
        }
        for(int i = 0; i < est.tamanho(); i++){
            Item auxItem = est.getItem(i);
            try {
                FileWriter escrever = new FileWriter("estoque.txt",true);
                String aux = auxItem.getNome() + " " + auxItem.getDesc() + " " + auxItem.getTags() + " " + String.valueOf(auxItem.getQtd()) + " " + auxItem.getDtst()+ " " + String.valueOf(auxItem.isProjeto()) + " " + auxItem.getProjeto().getNome() +" " + String.valueOf(auxItem.isEmprestado()) + "\n";
                escrever.write(aux);
                escrever.close();
    }           
                catch (IOException e) {
                JOptionPane.showMessageDialog(null,"Erro ao salvar o Item no Arquivo","Mensagem",JOptionPane.PLAIN_MESSAGE);
    }
        
        }
        try {
            deletaAux = new FileWriter("listadeCompras.txt", false);
            deletaAux.close();
        } catch (IOException ex) {
            Logger.getLogger(Inicio.class.getName()).log(Level.SEVERE, null, ex);
        }
        for(int i = 0; i < lstcmp.tamanho(); i++){
            Item auxItem = lstcmp.getItem(i);
            try {
                FileWriter escrever = new FileWriter("listadeCompras.txt",true);
                String aux = auxItem.getNome() + " " + auxItem.getDesc() + " " + auxItem.getTags() + " " + String.valueOf(auxItem.getQtd()) + " " + auxItem.getDtst()+ " " + String.valueOf(auxItem.isProjeto()) + " " + auxItem.getProjeto().getNome() +" " + String.valueOf(auxItem.isEmprestado()) + "\n";
                escrever.write(aux);
                escrever.close();
    }           
                catch (IOException e) {
                JOptionPane.showMessageDialog(null,"Erro ao salvar o Item no Arquivo","Mensagem",JOptionPane.PLAIN_MESSAGE);
    }
        
        }  
        
        try {
            deletaAux = new FileWriter("Tags.txt", false);
            deletaAux.close();
        } catch (IOException ex) {
            Logger.getLogger(Inicio.class.getName()).log(Level.SEVERE, null, ex);
        }
        for(int i = 0; i < tag.size(); i++){
            try {
                FileWriter escrever = new FileWriter("Tags.txt",true);
                String aux = tag.get(i) + "\n";
                escrever.write(aux);
                escrever.close();
    }           
                catch (IOException e) {
                JOptionPane.showMessageDialog(null,"Erro ao salvar o Item no Arquivo","Mensagem",JOptionPane.PLAIN_MESSAGE);
    }
        
        }
        
        System.exit(0);
    }//GEN-LAST:event_btnSairActionPerformed

    private void btnLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogoutActionPerformed
        //LogOut do Membro
        usuario = null;
        btnCadastrarItem.setEnabled(false);
        btnCadastrarMembro.setEnabled(false);
        if(listaMembros.isEmpty()){
            btnCadastrarMembro.setEnabled(true);
        }
        btnCadastrarProjeto.setEnabled(false);
        btnEstoque.setEnabled(false);
        btnListadeCompras.setEnabled(false);
        btnSair.setEnabled(true);
        btnLogout.setEnabled(false);
        boxListaMembros.setSelectedIndex(-1);
        txtSenha.setText("");
        
    }//GEN-LAST:event_btnLogoutActionPerformed
    
    public void atualizaboxListaMembros(){
        //Atualiza a Lista de Membros após o Cadastro
        boxListaMembros.removeAllItems();
        for(int i = 0; i < listaMembros.size();i++){
          Membro membroAux = listaMembros.get(i);
          boxListaMembros.addItem(membroAux.getNomeMembro());
        }
        
    }
    
    public void atualizaBtnCdtMemIni(){
        //Atualiza o Botão para não ser mais possível que um Usuário não registrado se cadastre após o primeiro cadastro ser realizado no Programa
        btnCadastrarMembro.setEnabled(false);
    }
    
    public void carregarProjetos(){
        //Carrega os Projetos Armazenados em um Arquivo
        Projeto projAux;
        File lstProjs = new File("Projetos.txt");
        if(lstProjs.exists()){
            try {
                Scanner txt = new Scanner(lstProjs);
                while(txt.hasNextLine()){
                    String[] dadosdoProj = txt.nextLine().split(" ");
        
                    dadosdoProj[2] = dadosdoProj[2].replaceAll("\\[", "");
                    dadosdoProj[2] = dadosdoProj[2].replaceAll("\\]", "");
                    dadosdoProj[2] = dadosdoProj[2].replaceAll(",", "");
                    String[] auxiliar = dadosdoProj[2].split(" ");
                    ArrayList<Membro> membrosProj = new ArrayList<Membro>();
                    for(int i = 0; i < auxiliar.length; i++){
                        for(int j = 0; j < listaMembros.size();j++){
                            if(auxiliar[i].equals(listaMembros.get(j).getNomeMembro())){
                                membrosProj.add(listaMembros.get(j));
                                break;
                            }
                        }
                    }

                    projAux = new Projeto(dadosdoProj[0],dadosdoProj[1],membrosProj);
                    listaProjetos.add(projAux);
                }
            } catch (FileNotFoundException ex) {
                Logger.getLogger(EstoqueClasse.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else{
            try {
                lstProjs.createNewFile();
            } catch (IOException ex) {
                Logger.getLogger(EstoqueClasse.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    
    public void carregarMembros(){
        //Carrega os Membros Armazenados em um Arquivo
        Membro membroAux;
        File lstMem = new File("Membros.txt");
        if(lstMem.exists()){
            try {
                Scanner txt = new Scanner(lstMem);
                while(txt.hasNextLine()){
                    String[] dadosdoMem = txt.nextLine().split(" ");
                    
                    if(dadosdoMem[2].equals("Diretoria")){
                        Diretor membro = new Diretor(dadosdoMem[0],dadosdoMem[1],dadosdoMem[2],dadosdoMem[3],dadosdoMem[4], true);
                        membroAux = (Membro) membro;
                }
                    else if(dadosdoMem[2].equals("Gerencia")){
                        Gerente membro = new Gerente(dadosdoMem[0],dadosdoMem[1],dadosdoMem[2],dadosdoMem[3],dadosdoMem[4], true);
                        membroAux = (Membro) membro;
            }
                    else{
                    Membro membro = new Membro(dadosdoMem[0],dadosdoMem[1],dadosdoMem[2],dadosdoMem[3],dadosdoMem[4]);
                    membroAux = membro;
            }
                    
                listaMembros.add(membroAux);
            }
            } catch (FileNotFoundException ex) {
                Logger.getLogger(EstoqueClasse.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else{
            try {
                lstMem.createNewFile();
            } catch (IOException ex) {
                Logger.getLogger(EstoqueClasse.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    
    public void carregarTags(){
        //Carrega as Tags Armazenados em um Arquivo
        File lstTags = new File("Tags.txt");
        if(lstTags.exists()){
            try {
                Scanner txt = new Scanner(lstTags);
                while(txt.hasNextLine()){
                    String dadosTag = txt.nextLine();

                    tag.add(dadosTag);
                }
            } catch (FileNotFoundException ex) {
                Logger.getLogger(EstoqueClasse.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else{
            try {
                lstTags.createNewFile();
            } catch (IOException ex) {
                Logger.getLogger(EstoqueClasse.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Inicio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Inicio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Inicio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Inicio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                init = new Inicio(); 
                init.setVisible(true);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Background;
    private javax.swing.JComboBox<String> boxListaMembros;
    private javax.swing.JButton btnCadastrarItem;
    private javax.swing.JButton btnCadastrarMembro;
    private javax.swing.JButton btnCadastrarProjeto;
    private javax.swing.JButton btnEstoque;
    private javax.swing.JButton btnListadeCompras;
    private javax.swing.JButton btnLogout;
    private javax.swing.JButton btnOkInício;
    private javax.swing.JButton btnSair;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel lblSenha;
    private javax.swing.JLabel lblTitulo;
    private javax.swing.JPasswordField txtSenha;
    // End of variables declaration//GEN-END:variables
}
